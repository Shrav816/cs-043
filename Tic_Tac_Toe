import random
import time


class Board():
    def __init__(self, brd):
        # Initializes data attribute brd.
        self.brd = brd

    def drawBoard(self):
        # This function prints out the board that it was passed.

        print('   |   |')
        print(' ' + self.brd[7] + ' | ' + self.brd[8] + ' | ' + self.brd[9])
        print('   |   |')
        print('-----------')
        print('   |   |')
        print(' ' + self.brd[4] + ' | ' + self.brd[5] + ' | ' + self.brd[6])
        print('   |   |')
        print('-----------')
        print('   |   |')
        print(' ' + self.brd[1] + ' | ' + self.brd[2] + ' | ' + self.brd[3])
        print('   |   |')

    def inputPlayerLetter(self):
        # Players select their letters.
        symbol = ''
        while (symbol != 'X') and (symbol != 'O'):
            print('Do you want to be X or O?')
            symbol = str(input().upper())

        if symbol == 'X':
            return ['X', 'O']
        else:
            return ['O', 'X']

    def isBoardFull(self):
        # Return True if every space on the board has been taken. Otherwise return False.
        for i in range(1, 10):
            if self.brd[i] == ' ':
                return False
        return True


class Player(Board):
    def __init__(self, brd, letter):
        # Initializes data attributes brd and letter.
        super().__init__(brd)
        self.letter = letter

    def whoGoesFirst(self):
        # Randomly choose which player goes first.
        if random.randint(0, 1) == 0:
            return 'Player 1'
        else:
            return 'Player 2'

    def isWinner(self):
        # Checks if a player has won.
        return ((self.brd[7] == self.letter and self.brd[8] == self.letter and self.brd[9] == self.letter) or
                (self.brd[4] == self.letter and self.brd[5] == self.letter and self.brd[6] == self.letter) or
                (self.brd[1] == self.letter and self.brd[2] == self.letter and self.brd[3] == self.letter) or
                (self.brd[7] == self.letter and self.brd[4] == self.letter and self.brd[1] == self.letter) or
                (self.brd[8] == self.letter and self.brd[5] == self.letter and self.brd[2] == self.letter) or
                (self.brd[9] == self.letter and self.brd[6] == self.letter and self.brd[3] == self.letter) or
                (self.brd[7] == self.letter and self.brd[5] == self.letter and self.brd[3] == self.letter) or
                (self.brd[9] == self.letter and self.brd[5] == self.letter and self.brd[1] == self.letter))

    def isSpaceFree(self, move):
        # Returns true if a space is free.
        return self.brd[int(move)] == ' '

    def getPlayerMove(self):
        # Asks for player's move.
        move = ''
        while move not in '1 2 3 4 5 6 7 8 9'.split() or not self.isSpaceFree(move):
            print('What is your next move?')
            move = input()
        move = int(move)
        return move

    def makeMove(self, move):
        # Makes move on the board.
        self.brd[int(move)] = self.letter

    def playAgain(self):
        print('Do you want to play again?')
        return input().lower().startswith('y')


print('Welcome to Tic Tac Toe!\n')

while True:
    # Creates the board as well as three objects.
    theBoard = [' '] * 10
    actual_board = Board(theBoard)
    letter_one, letter_two = actual_board.inputPlayerLetter()
    player_one = Player(theBoard, letter_one)
    player_two = Player(theBoard, letter_two)

    print('Player one\'s letter: ' + letter_one)
    print('Player two\'s letter: ' + letter_two + '\n')
    turn = player_one.whoGoesFirst()
    print(turn + ' will go first.')
    actual_board.drawBoard()

    gameIsPlaying = True

    while gameIsPlaying:
        # Player one's turn
        if turn == 'Player 1':
            print('It\'s ' + turn + '\'s turn...')
            move = player_one.getPlayerMove()
            player_one.makeMove(move)
            time.sleep(0.25)
            actual_board.drawBoard()

            if player_one.isWinner():
                print('Hooray! Player 1 is the winner!')
                gameIsPlaying = False
            else:
                if actual_board.isBoardFull():
                    print('The game is a tie!')
                    break
                else:
                    turn = 'Player 2'
        else:
            # Player two's turn
            print('It\'s ' + turn + '\'s turn...')
            move = player_two.getPlayerMove()
            player_two.makeMove(move)
            time.sleep(0.25)
            actual_board.drawBoard()

            if player_two.isWinner():
                print('Hooray! Player 2 is the winner!')
                gameIsPlaying = False
            else:
                if actual_board.isBoardFull():
                    print('The game is a tie!')
                    break
                else:
                    turn = 'Player 1'

    if not player_one.playAgain():
        break
